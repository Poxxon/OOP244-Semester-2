During this workshop, I learned how to effectively organize a C++ program into separate modules, which improved the structure and maintainability of the code. This involved dividing the program into the main module, file handling module, shopping list management module, shopping record module, and utility functions module. Each module handled specific functionality, making the code easier to read, debug, and maintain.
Using header files for declarations and implementation files for definitions was crucial. This ensured a clear structure and avoided multiple inclusion problems with include guards. Placing all the code inside the seneca namespace prevented naming conflicts and clearly scoped the functions and variables.
Handling file operations in C++ was another significant learning area. The File.cpp module managed reading from and writing to a file, requiring careful management of file pointers and error checking. Managing dynamic data through arrays ensured the shopping list could grow and shrink dynamically. Functions were implemented to add, remove, and display items, maintaining the list's integrity. Creating robust functions in the Utils.cpp module for reading and validating user input was essential.
I faced challenges like compilation errors related to missing type specifiers and namespace issues, which were resolved by including all required header files and correctly organizing the namespace. Overall, this workshop reinforced principles of good software design and solidified my understanding of key C++ concepts.